version: '3'

services:
  app:
    container_name: app
    build:
      context: ./Application
      dockerfile: Api/Dockerfile
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA__BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT}	
      KAFKA__DEFAULT_TOPIC: ${KAFKA__DEFAULT_TOPIC}
    networks:
      producer-net:

  zookeeper:
    container_name: zookeeper
    image: "bitnami/zookeeper:latest"
    expose:
      - "${ZOOKEEPER_CLIENT_PORT}"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      producer-net:

  kafka:
    container_name: kafka
    image: bitnami/kafka:2.5.0
    depends_on:
      - zookeeper
    expose:
      - "${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      producer-net:
      consumer-net:
          ipv4_address: 10.6.0.5

  spark-master:
    container_name: spark-master
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
      - "${SPARK_MASTER_WEBUI_PORT}:${SPARK_MASTER_WEBUI_PORT}"
    environment:
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_MASTER_HOST: 10.6.0.4

    networks:
      consumer-net:
        ipv4_address: 10.6.0.4

  spark-worker:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://10.6.0.4:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://10.6.0.4:7077
    networks:
      consumer-net:

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD}
    expose:
      - "${INFLUXDB_PORT}"
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - influxdb-net
      - grafana-net

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    depends_on:
      - app
      - kafka
      - influxdb
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning/:/etc/grafana/provisioning
    networks:
      - grafana-net

networks:
  influxdb-net:
  grafana-net:
  consumer-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.6.0.0/16
          gateway: 10.6.0.1
  producer-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.5.0.0/16
          ip_range: 10.5.0.0/24
          gateway: 10.5.0.1
          aux_addresses:
            kafka: 10.5.0.2
            zookeeper: 10.5.0.3

volumes:
  influxdb-data:
  grafana-data:
