version: '3'

networks:
  kafka-net:
  producer-consumer-net:
  influxdb-net:
  grafana-net:

services:
  app:
    container_name: app
    build:
      context: ./Application
      dockerfile: Api/Dockerfile
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      - KAFKA__BOOTSTRAP_SERVERS=${KAFKA__BOOTSTRAP_SERVERS}
      - KAFKA__DEFAULT_TOPIC=${KAFKA__DEFAULT_TOPIC}
    networks:
      - kafka-net
    depends_on:
      - kafka
      

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - kafka-net
      - producer-consumer-net
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - kafka-net
  
  spark-master:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
        - "9090:8080"
        - "7077:7077"

  spark-worker-1:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077

  spark-worker-2:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    restart: unless-stopped
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD}
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - influxdb-net
      - grafana-net
    depends_on:
      - kafka

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning/:/etc/grafana/provisioning
    networks:
      - grafana-net
    depends_on:
      - app
      - kafka
      
      - influxdb

volumes:
  influxdb-data:
  grafana-data: